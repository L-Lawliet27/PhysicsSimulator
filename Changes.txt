---------------------------------------
Changes From Comments
---------------------------------------

model
=====

# Body.java:

- changed equals(Body) to equals(Object)

# ForceLaws.java:

- removed import

# MassLosingBody.java:

- counter incremented before the if-statement


factories
=========

# BasicBodyBuilder.java:

- removed try-catch

# Builder.java:

- refactored some of the code of getBuilderInfo, now the builders pass parameters to a protected method

# EpsilonEqualStatesBuilder.java:

- removed try-catch

# MassLosingBodyBuilder.java:

- removed try-catch

# MovingTowardsFixedPointBuilder.java:

- changed type from mtcp to mtfp

- removed try-catch


launcher
========

# Main.java:
- set System.out as the default value for output


---------------------------------------
Changes While Implementing GUI
---------------------------------------

# NewtonUniversalGravitationBuilder.java:
- fixed Constant g
- added extra condition in IF of method instanceOf()

# MovingTowardsFixedPointBuilder.java:
- added extra condition in IF of method instanceOf()


---------------------------------------
Changes From Comments #2
---------------------------------------

Status Bar
===========
- Took out the Body Status onAdvance()


Main/BodiesTableModel
=====================
- In case the data is empty, it returns "", thus not adding -i doesn't throw an exception

- Added method advanceTable(), which only updates the data of the 2 to 4 row and calls fireTableDataChanged()

- Eliminated the private List of Bodies, so I just pass it locally to updateTable() and advanceTable()

- Added private int rowCount with default value 1, and private method updateRowCount() that is called when
  table resets, is on register, or when a body is added

- Eliminated rowData double-array and instead implemented a Map<Integer, Vector<Object>> [rData]


Viewer
=======
- Added 4 to the starting points of the vectors to put them in the center of the body


ForceDialog
===========
-Deleted the three tableModels for the Forces, and implemented a single tableModel, ForceTableModel

-Optimized the code so to only use ForceTableModel and a single instance of forceTable


ForceTableModel
===============
-Refactored the code to process each law, thus using giving way to add additional laws without much refactoring,
 which would be in the setValues() method
